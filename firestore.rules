rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Public settings - readable by all, writable by admin
    match /settings/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Business services and categories - readable by all, writable by admin
    match /business_services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /service_categories/{categoryId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      
      // Allow recursive access to subcategories
      match /subcategories/{subcategoryId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
        
        // Allow access to all nested documents within subcategories
        match /{document=**} {
          allow read: if true;
          allow create, update, delete: if isAdmin();
        }
      }
    }

    match /service_addons/{addonId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Social links - readable by all, writable by admin
    match /social_links/{linkId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Business hours - readable by all, writable by admin
    match /opening_hours/{dayId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /special_hours/{dateId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Appointments - public can see dates, authenticated users can see and manage their own
    match /appointments/{appointmentId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Users collection - users can read/write their own data, admin can read all
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || isAdmin()
      );
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
